import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import ast_elements.*;

terminal PLUS, MINUS, LPAREN, RPAREN, EQUAL, TIMES, DIVIDE, MOD, EXPONENT, FLOOR;
terminal LABEL, COLON, COMMA, LBRACK, RBRACK, STRING, TRUE, FALSE, IF, WHILE, FOR, RANGE, IN, PRINT, LESS, LESSEQ, MOREEQ, MORE, NOTEQ, EQEQ, OI, CI;
terminal NUMBER, FLOAT;

non terminal label, bool, bin_op1, bin_op2, cond_sign, list;

non terminal ProgramAST program;
non terminal Expression expr0, expr1, expr2, expr3, term, expr;
non terminal List<Statement> stmt_list;
non terminal Statement stmt, assignment, print;


start with program;

program	::= stmt_list:sl												{: RESULT = new ProgramAST(sl); :};

stmt_list ::= stmt_list:sl stmt:st										{: RESULT = sl; RESULT.add(st); :}
		| stmt:st 														{: RESULT = new ArrayList<Statement>(); RESULT.add(st); :};

stmt 	::= label:v COLON label:t EQUAL expr:ex							{: RESULT = new DeclarationVal(String.valueOf(v), String.valueOf(t), ex); :}
		| label:v COLON label:t											{: RESULT = new Declaration(String.valueOf(v), String.valueOf(t)); :}
		| label:v EQUAL expr:ex											{: RESULT = new Assignment(String.valueOf(v), ex); :}
		| IF expr:ex COLON OI stmt_list:sl CI 							{: RESULT = new IfStatement(ex, sl); :}
		| WHILE expr:ex COLON OI stmt_list:sl CI						{: RESULT = new WhileLoop(ex, sl); :}
		| PRINT LPAREN expr:ex RPAREN									{: RESULT = new Print(ex); :};

bool 	::= TRUE 
		| FALSE;

label 	::= LABEL;


cond_sign ::= EQEQ
		| NOTEQ
		| LESS
		| MORE
		| MOREEQ
		| LESSEQ;

bin_op1	::= PLUS
		| MINUS;

bin_op2	::= TIMES
		| DIVIDE
		| MOD
		| EXPONENT
		| FLOOR;

expr 	::= expr0;

expr0 	::= expr1:e1 cond_sign:op expr1:e2		{: RESULT = new BinaryOperator(e1, String.valueOf(op), e2); :}
        | expr1;

expr1 	::= expr1:e1 bin_op1:op expr2:e2		{: RESULT = new BinaryOperator(e1, String.valueOf(op), e2); :}
		| term;

// expr2 	::= expr2:e1 bin_op2:op expr3:e2		{: RESULT = new BinaryOperator(e1, String.valueOf(op), e2); :}
// 		| expr3;

// expr3	::= expr3:e COMMA term:t				{: RESULT = new BinaryOperator(e1, String.valueOf(op), e2); :}
// 		| term;

term 	::= LPAREN expr RPAREN
		| NUMBER:n							{: RESULT = new NumberExpression(String.valueOf(n)); :}
		| bool
		| label
		| STRING
		| FLOAT;