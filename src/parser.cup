import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import ast_elements.*;

terminal String PLUS, MINUS, LPAREN, RPAREN, EQUAL, TIMES, DIVIDE, MOD, EXPONENT, FLOOR, COMMA, LESS, LESSEQ, MOREEQ, MORE, NOTEQ, EQEQ;
terminal COLON, LBRACK, RBRACK, IF, WHILE, FOR, RANGE, IN, PRINT, OI, CI;
terminal String LABEL, STRING;
terminal Integer NUMBER;
terminal Float FLOAT;
terminal Boolean TRUE, FALSE;

non terminal Boolean bool;
non terminal String bin_op1, bin_op2, cond_sign;

non terminal ProgramAST program;
non terminal Expression expr0, expr1, expr2, expr3, term, expr;
non terminal List<Statement> stmt_list;
non terminal Statement stmt, assignment, print;


start with program;

program	::= stmt_list:sl												{: RESULT = new ProgramAST(sl); :};

stmt_list ::= stmt_list:sl stmt:st										{: RESULT = sl; RESULT.add(st); :}
		| stmt:st 														{: RESULT = new ArrayList<Statement>(); RESULT.add(st); :};

stmt 	::= LABEL:v COLON LABEL:t EQUAL expr:ex							{: RESULT = new DeclarationVal(v, t, ex); :}
		| LABEL:v COLON LABEL:t											{: RESULT = new Declaration(v, t); :}
		| LABEL:v EQUAL expr:ex											{: RESULT = new Assignment(v, ex); :}
		| IF expr:ex COLON OI stmt_list:sl CI 							{: RESULT = new IfStatement(ex, sl); :}
		| WHILE expr:ex COLON OI stmt_list:sl CI						{: RESULT = new WhileLoop(ex, sl); :}
		| PRINT LPAREN expr:ex RPAREN									{: RESULT = new Print(ex); :};

bool 	::= TRUE 
		| FALSE;

expr 	::= expr0:e2						{: RESULT = e2; :};

expr0 	::= expr0:e1 MORE:op expr1:e2		{: RESULT = new BinaryOperator(e1, op, e2); :}
        | expr1:e2 							{: RESULT = e2; :};

expr1 	::= expr1:e1 PLUS:op term:e2		{: RESULT = new BinaryOperator(e1, op, e2); :}
		| expr1:e1 MINUS:op term:e2			{: RESULT = new BinaryOperator(e1, op, e2); :}
		| term:e2 							{: RESULT = e2; :};

expr2 	::= expr2:e1 TIMES:op expr3:e2		{: RESULT = new BinaryOperator(e1, op, e2); :}
		| expr2:e1 DIVIDE:op expr3:e2		{: RESULT = new BinaryOperator(e1, op, e2); :}
		| expr2:e1 MOD:op expr3:e2			{: RESULT = new BinaryOperator(e1, op, e2); :}
		| expr2:e1 EXPONENT:op expr3:e2		{: RESULT = new BinaryOperator(e1, op, e2); :}
		| expr2:e1 FLOOR:op expr3:e2		{: RESULT = new BinaryOperator(e1, op, e2); :}
		| expr3;

expr3	::= expr3:e COMMA:op term:t			{: RESULT = new BinaryOperator(e, op, t); :}
		| term;

term 	::= LPAREN expr RPAREN
		| NUMBER:n							{: RESULT = new NumberExpression(n); :}
		| bool:b							{: RESULT = new BooleanExpression(b); :}
		| LABEL:l							{: RESULT = new LabelExpression(l); :}
		| STRING:s							{: RESULT = new StringExpression(s); :}
		| FLOAT:f							{: RESULT = new FloatExpression(f); :};