
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import ast_elements.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\006\003\000\002\014" +
    "\004\000\002\014\003\000\002\015\003\000\002\015\010" +
    "\000\002\015\010\000\002\016\005\000\002\002\003\000" +
    "\002\002\005\000\002\002\006\000\002\004\003\000\002" +
    "\004\003\000\002\003\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\013\003\000\002\007\005\000" +
    "\002\007\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\011\005\000\002\011\003\000\002\012" +
    "\005\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\010\012\010\021\011\022\004\001\002\000" +
    "\020\006\031\012\010\016\023\017\021\020\026\033\020" +
    "\034\032\001\002\000\014\002\ufffd\012\ufffd\021\ufffd\022" +
    "\ufffd\032\ufffd\001\002\000\014\002\ufffe\012\ufffe\021\ufffe" +
    "\022\ufffe\032\ufffe\001\002\000\004\002\066\001\002\000" +
    "\050\002\ufff4\004\ufff4\005\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\032\ufff4" +
    "\001\002\000\020\006\031\012\010\016\023\017\021\020" +
    "\026\033\020\034\032\001\002\000\010\010\ufff9\013\054" +
    "\014\055\001\002\000\012\002\000\012\010\021\011\022" +
    "\004\001\002\000\004\010\015\001\002\000\020\006\031" +
    "\012\010\016\023\017\021\020\026\033\020\034\032\001" +
    "\002\000\044\002\uffe3\004\uffe3\005\uffe3\007\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\015\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\032\uffe3\001\002" +
    "\000\044\002\uffe6\004\uffe6\005\uffe6\007\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\015\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\032\uffe6\001\002\000" +
    "\044\002\uffe4\004\uffe4\005\uffe4\007\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\015\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\032\uffe4\001\002\000\044" +
    "\002\ufff6\004\ufff6\005\ufff6\007\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\015\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\032\ufff6\001\002\000\044\002" +
    "\uffe8\004\uffe8\005\uffe8\007\uffe8\011\047\012\uffe8\013\uffe8" +
    "\015\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\032\uffe8\001\002\000\044\002\uffe1" +
    "\004\uffe1\005\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\015" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\032\uffe1\001\002\000\042\002\uffeb\004" +
    "\042\005\035\007\uffeb\012\uffeb\013\uffeb\015\uffeb\021\uffeb" +
    "\022\uffeb\023\044\024\040\025\045\026\043\027\041\030" +
    "\036\032\uffeb\001\002\000\022\002\uffed\007\uffed\012\uffed" +
    "\013\uffed\015\uffed\021\uffed\022\uffed\032\uffed\001\002\000" +
    "\044\002\ufff5\004\ufff5\005\ufff5\007\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\015\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\032\ufff5\001\002\000\044" +
    "\002\uffe2\004\uffe2\005\uffe2\007\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\015\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\032\uffe2\001\002\000\014\002" +
    "\ufffa\012\ufffa\021\ufffa\022\ufffa\032\ufffa\001\002\000\020" +
    "\006\031\012\010\016\023\017\021\020\026\033\020\034" +
    "\032\001\002\000\044\002\uffe0\004\uffe0\005\uffe0\007\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\015\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\032\uffe0" +
    "\001\002\000\004\007\034\001\002\000\044\002\uffe5\004" +
    "\uffe5\005\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\032\uffe5\001\002\000\020\006\031\012\010" +
    "\016\023\017\021\020\026\033\020\034\032\001\002\000" +
    "\020\006\ufff3\012\ufff3\016\ufff3\017\ufff3\020\ufff3\033\ufff3" +
    "\034\ufff3\001\002\000\020\006\031\012\010\016\023\017" +
    "\021\020\026\033\020\034\032\001\002\000\020\006\uffee" +
    "\012\uffee\016\uffee\017\uffee\020\uffee\033\uffee\034\uffee\001" +
    "\002\000\020\006\ufff2\012\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\033\ufff2\034\ufff2\001\002\000\020\006\031\012\010\016" +
    "\023\017\021\020\026\033\020\034\032\001\002\000\020" +
    "\006\ufff0\012\ufff0\016\ufff0\017\ufff0\020\ufff0\033\ufff0\034" +
    "\ufff0\001\002\000\020\006\ufff1\012\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\033\ufff1\034\ufff1\001\002\000\020\006\uffef\012" +
    "\uffef\016\uffef\017\uffef\020\uffef\033\uffef\034\uffef\001\002" +
    "\000\044\002\uffea\004\uffea\005\uffea\007\uffea\011\047\012" +
    "\uffea\013\uffea\015\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\032\uffea\001\002\000" +
    "\020\006\031\012\010\016\023\017\021\020\026\033\020" +
    "\034\032\001\002\000\044\002\uffe7\004\uffe7\005\uffe7\007" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\032" +
    "\uffe7\001\002\000\026\002\uffec\004\042\005\035\007\uffec" +
    "\012\uffec\013\uffec\015\uffec\021\uffec\022\uffec\032\uffec\001" +
    "\002\000\044\002\uffe9\004\uffe9\005\uffe9\007\uffe9\011\047" +
    "\012\uffe9\013\uffe9\015\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\032\uffe9\001\002" +
    "\000\014\002\uffff\012\uffff\021\uffff\022\uffff\032\uffff\001" +
    "\002\000\004\012\010\001\002\000\020\006\031\012\010" +
    "\016\023\017\021\020\026\033\020\034\032\001\002\000" +
    "\004\015\057\001\002\000\004\010\ufff7\001\002\000\004" +
    "\010\ufff8\001\002\000\004\013\062\001\002\000\004\031" +
    "\063\001\002\000\010\012\010\021\011\022\004\001\002" +
    "\000\012\012\010\021\011\022\004\032\065\001\002\000" +
    "\014\002\ufffc\012\ufffc\021\ufffc\022\ufffc\032\ufffc\001\002" +
    "\000\004\002\001\001\002\000\004\013\070\001\002\000" +
    "\004\031\071\001\002\000\010\012\010\021\011\022\004" +
    "\001\002\000\012\012\010\021\011\022\004\032\073\001" +
    "\002\000\014\002\ufffb\012\ufffb\021\ufffb\022\ufffb\032\ufffb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\016\002\013\003\011\006\006\014\012\015" +
    "\005\016\004\001\001\000\020\003\026\004\015\007\024" +
    "\010\023\011\021\012\016\013\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\026\004\015\007\024\010\023\011\021\012" +
    "\016\013\060\001\001\000\002\001\001\000\012\002\013" +
    "\003\011\015\052\016\004\001\001\000\002\001\001\000" +
    "\020\003\026\004\015\007\024\010\023\011\021\012\016" +
    "\013\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\026\004\015\007\024\010\023\011\021\012\016\013" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\026\004\015\011\051\012\016\001" +
    "\001\000\002\001\001\000\014\003\026\004\015\010\050" +
    "\011\021\012\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\026\004\015\011\045\012\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\026\004\015\012\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\057\001\001\000\020\003\026" +
    "\004\015\007\024\010\023\011\021\012\016\013\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\013\003" +
    "\011\014\063\015\005\016\004\001\001\000\012\002\013" +
    "\003\011\015\052\016\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\013\003\011\014\071\015\005\016\004\001\001\000" +
    "\012\002\013\003\011\015\052\016\004\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramAST start_val = (ProgramAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmt_list 
            { parser.Tree.reduce(1,"program",0);
              ProgramAST RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramAST(sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt_list ::= stmt_list stmt 
            { parser.Tree.reduce(2,"stmt_list",0);
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sl; RESULT.add(st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_list ::= stmt 
            { parser.Tree.reduce(1,"stmt_list",0);
              List<Statement> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Statement>(); RESULT.add(st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= assignment 
            { parser.Tree.reduce(1,"stmt",0);
              Statement RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement as = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= IF expr COLON OI stmt_list CI 
            { parser.Tree.reduce(6,"stmt",0);
              Statement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStatement(ex, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= WHILE expr COLON OI stmt_list CI 
            { parser.Tree.reduce(6,"stmt",0);
              Statement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStatement(ex, sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // assignment ::= lvalue EQUAL expr 
            { parser.Tree.reduce(3,"assignment",0);
              Statement RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lvalue ::= label 
            { parser.Tree.reduce(1,"lvalue",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lvalue ::= label COLON label 
            { parser.Tree.reduce(3,"lvalue",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lvalue ::= label LBRACK expr RBRACK 
            { parser.Tree.reduce(4,"lvalue",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bool ::= TRUE 
            { parser.Tree.reduce(1,"bool",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bool ::= FALSE 
            { parser.Tree.reduce(1,"bool",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // label ::= LABEL 
            { parser.Tree.reduce(1,"label",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("label",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cond_sign ::= EQEQ 
            { parser.Tree.reduce(1,"cond_sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_sign",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cond_sign ::= NOTEQ 
            { parser.Tree.reduce(1,"cond_sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_sign",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cond_sign ::= LESS 
            { parser.Tree.reduce(1,"cond_sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_sign",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cond_sign ::= MORE 
            { parser.Tree.reduce(1,"cond_sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_sign",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cond_sign ::= MOREEQ 
            { parser.Tree.reduce(1,"cond_sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_sign",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cond_sign ::= LESSEQ 
            { parser.Tree.reduce(1,"cond_sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_sign",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr0 
            { parser.Tree.reduce(1,"expr",0);
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr0 ::= expr1 cond_sign expr1 
            { parser.Tree.reduce(3,"expr0",0);
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr0 ::= expr1 
            { parser.Tree.reduce(1,"expr0",0);
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr1 ::= expr1 PLUS expr2 
            { parser.Tree.reduce(3,"expr1",0);
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr1 ::= expr1 MINUS expr2 
            { parser.Tree.reduce(3,"expr1",0);
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr1 ::= expr2 
            { parser.Tree.reduce(1,"expr1",0);
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr2 ::= expr2 TIMES term 
            { parser.Tree.reduce(3,"expr2",0);
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr2 ::= term 
            { parser.Tree.reduce(1,"expr2",0);
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // term ::= LPAREN expr RPAREN 
            { parser.Tree.reduce(3,"term",0);
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // term ::= NUMBER 
            { parser.Tree.reduce(1,"term",0);
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term ::= bool 
            { parser.Tree.reduce(1,"term",0);
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // term ::= label 
            { parser.Tree.reduce(1,"term",0);
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term ::= STRING 
            { parser.Tree.reduce(1,"term",0);
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term ::= FLOAT 
            { parser.Tree.reduce(1,"term",0);
              Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
